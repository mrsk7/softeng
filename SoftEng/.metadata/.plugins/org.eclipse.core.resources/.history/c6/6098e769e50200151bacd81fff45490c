
package net.java.sip.communicator.gui;

import java.awt.*;
import java.awt.geom.*;
import java.awt.event.*;
import java.sql.DriverManager;
import java.util.*;
import javax.swing.*;


import java.awt.BorderLayout;
import java.awt.Component;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.FontMetrics;
import java.awt.Frame;
import java.awt.Graphics;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Insets;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.Toolkit;

import net.java.sip.communicator.common.*;
import java.sql.*;
//import net.java.sip.communicator.gui.AuthenticationSplash.FocusTraversalPol;

import jmapps.ui.MessageDialog;

public class ManageSplash extends JDialog
{
	protected JTextField userNameTextField = null;
	protected JTextField payField=null;
	protected JButton blockingButton = null;
	protected JButton unblockingButton = null;
	protected JButton unforwardButton = null;
	protected JButton payButton = null;
	protected JButton changeButton = null;
	protected JButton forwardButton = null;
	protected JComboBox policyBox = null;
	protected String policyChoice = null;
	protected JButton cancelButton = null;
	protected String[] policyList = null;
	protected String currentPolicy = null;
	protected GuiManager guiManCallback = null;



	/**
	 * Command string for a cancel action (e.g., a button).
	 * This string is never presented to the user and should
	 * not be internationalized.
	 */
	private String CMD_CANCEL = "cmd.cancel" /*NOI18N*/;
	private String CMD_CHANGE = "cmd.change";
	private GridBagConstraints c_1;


	public ManageSplash(Frame parent, boolean modal, String[] policyList,String currentPolicy,GuiManager gui)
	{
		super(parent, modal);
		guiManCallback = gui;
		//  initResources();
		this.policyList = policyList;
		this.currentPolicy = currentPolicy;
		initComponents();
		pack();
		centerWindow();
	}

	private void centerWindow()
	{
		Rectangle screen = new Rectangle(
				Toolkit.getDefaultToolkit().getScreenSize());
		Point center = new Point(
				(int) screen.getCenterX(), (int) screen.getCenterY());
		Point newLocation = new Point(
				center.x - this.getWidth() / 2, center.y - this.getHeight() / 2);
		if (screen.contains(newLocation.x, newLocation.y,
				this.getWidth(), this.getHeight())) {
			this.setLocation(newLocation);
		}
	} // centerWindow()


	private void initComponents()
	{
		Container contents = getContentPane();
		contents.setLayout(new BorderLayout());

		String title = Utils.getProperty("net.java.sip.communicator.gui.REG_WIN_TITLE");

		if(title == null)
			title = "Account Management";

		setTitle(title);
		setResizable(false);
		addWindowListener(new WindowAdapter()
		{
			public void windowClosing(WindowEvent event)
			{
				dialogDone(CMD_CANCEL);
			}
		});

		// Accessibility -- all frames, dialogs, and applets should
		// have a description
		getAccessibleContext().setAccessibleDescription("Manage Splash");


		JPanel centerPane = new JPanel();
		centerPane.setLayout(new GridBagLayout());

		userNameTextField = new JTextField(); // needed below

		// user name label
		JLabel userNameLabel = new JLabel();
		userNameLabel.setDisplayedMnemonic('U');
		// setLabelFor() allows the mnemonic to work
		userNameLabel.setLabelFor(userNameTextField);

		String userNameLabelValue = "User name*";

		int gridy = 0;

		userNameLabel.setText(userNameLabelValue);
		GridBagConstraints c = new GridBagConstraints();
		c.gridx=0;
		c.gridy=gridy;
		c.anchor=GridBagConstraints.WEST;
		c.insets=new Insets(12, 12, 5, 5);
		centerPane.add(userNameLabel, c);

		// user name text
		c = new GridBagConstraints();
		c.gridx=1;
		c.gridy=gridy++;
		c.fill=GridBagConstraints.HORIZONTAL;
		c.weightx=1.0;
		c.insets=new Insets(12, 7, 5, 11);
		centerPane.add(userNameTextField, c);

		//username example
		if(GuiManager.isThisSipphoneAnywhere)
		{

			String egValue = Utils.getProperty("net.java.sip.communicator.sipphone.USER_NAME_EXAMPLE");

			if(egValue == null)
				egValue = "Example: 1-747-555-1212";

			JLabel userNameExampleLabel = new JLabel();

			userNameExampleLabel.setText(egValue);
			c = new GridBagConstraints();
			c.gridx=0;
			c.gridy=gridy++;
			c.anchor=GridBagConstraints.WEST;
			c.fill=GridBagConstraints.HORIZONTAL;
			c.insets=new Insets(12,12,0,0);
			centerPane.add(userNameExampleLabel, c);

		}

		//OURS
		//Added policies option button
		policyBox = new JComboBox(policyList);
		policyBox.setSelectedItem(currentPolicy);
		policyBox.addActionListener(null);
		JLabel policyLabel = new JLabel();
		policyLabel.setText("Policy*");
		policyLabel.setLabelFor(policyBox);
		c = new GridBagConstraints();
		c.gridx = 0;
		c.gridy = gridy;
		c.anchor = GridBagConstraints.WEST;
		c.insets = new Insets(11, 12, 5, 5);
		centerPane.add(policyLabel, c);

		c = new GridBagConstraints();
		c.gridx=1;
		c.gridy=gridy++;
		c.fill=GridBagConstraints.HORIZONTAL;
		c.weightx=1.0;
		c.insets=new Insets(12, 7, 5, 11);
		centerPane.add(policyBox,c);





		

		JPanel buttonPanel = new JPanel();
		buttonPanel.setLayout(new BoxLayout(buttonPanel, 0));
		blockingButton = new JButton();
		blockingButton.setText("Block");
		//blockingButton.setActionCommand(CMD_BLOCK);
		blockingButton.addActionListener(new ActionListener()
		{
			public void actionPerformed(ActionEvent event)
			{
				if (userNameTextField.getText().equals("")){
					JOptionPane.showMessageDialog(null, "You must enter a user name");
					System.out.println("You must enter a user name");

				}

				else  {
					guiManCallback.blockingButton_actionPerformed(event);
				}


			}
		});
		buttonPanel.add(blockingButton);

		// space
		buttonPanel.add(Box.createRigidArea(new Dimension(5, 0)));


		forwardButton = new JButton();
		forwardButton.setText("Forward");
		// forwardButton.setActionCommand(CMD_FORWARD);
		forwardButton.addActionListener(new ActionListener()
		{
			public void actionPerformed(ActionEvent event)
			{
				if (userNameTextField.getText().equals("")){
					JOptionPane.showMessageDialog(null, "You must enter a user name");
					System.out.println("You must enter a user name");

				}
				else  {
					guiManCallback.forwardButton_actionPerformed(event);
				}


			}
		});
		buttonPanel.add(forwardButton);

		// space
		buttonPanel.add(Box.createRigidArea(new Dimension(5, 0)));



		changeButton = new JButton();
		changeButton.setText("Change Policy");
		changeButton.setActionCommand(CMD_CHANGE);
		changeButton.addActionListener(new ActionListener()
		{
			public void actionPerformed(ActionEvent event)
			{
				policyChoice = (String) policyBox.getSelectedItem();
				if (currentPolicy.equals(policyChoice)) {
					PopupWindow x = new PopupWindow("You didn't change your billing policy. Please select other policy","Same policy");
				}
				else {
					guiManCallback.changePolicyButton_actionPerformed(event);
				}
			}
		});
		buttonPanel.add(changeButton);

		// space
		buttonPanel.add(Box.createRigidArea(new Dimension(5, 0)));
		//Set a relevant realm value
		//Bug report by Steven Lass (sltemp at comcast.net)
		//JLabel realmValueLabel = new JLabel("SipPhone.com"); // needed below

		// realm label


		// Buttons along bottom of window
		buttonPanel.add(Box.createRigidArea(new Dimension(5, 0)));

		cancelButton = new JButton();
		cancelButton.setText("Done");
		cancelButton.setActionCommand(CMD_CANCEL);
		cancelButton.addActionListener(new ActionListener()
		{
			public void actionPerformed(ActionEvent event)
			{
				dialogDone(event);
			}
		});
		buttonPanel.add(cancelButton);

		buttonPanel.add(Box.createRigidArea(new Dimension(5, 0)));

		c = new GridBagConstraints();
		c.gridx = 0;
		c.gridy = 5;
		c.gridwidth = 2;
		c.insets = new Insets(11, 12, 11, 11);

		centerPane.add(buttonPanel, c);
		getRootPane().setDefaultButton(cancelButton);

		/////START


		JPanel buttonPanel2 = new JPanel();
		buttonPanel2.setLayout(new BoxLayout(buttonPanel2, 0));
		unblockingButton = new JButton();
		unblockingButton.setText("Unblock");
		//blockingButton.setActionCommand(CMD_BLOCK);
		unblockingButton.addActionListener(new ActionListener()
		{
			public void actionPerformed(ActionEvent event)
			{
				if (userNameTextField.getText().equals("")){
					JOptionPane.showMessageDialog(null, "You must enter a user name");
					System.out.println("You must enter a user name");

				}

				else  {
					guiManCallback.unblockingButton_actionPerformed(event);
				}


			}
		});
		buttonPanel2.add(unblockingButton);

		// space
		buttonPanel2.add(Box.createRigidArea(new Dimension(5, 0)));


		unforwardButton = new JButton();
		unforwardButton.setText("Unforward");
		// forwardButton.setActionCommand(CMD_FORWARD);
		unforwardButton.addActionListener(new ActionListener()
		{
			public void actionPerformed(ActionEvent event)
			{
				if (userNameTextField.getText().equals("")){
					JOptionPane.showMessageDialog(null, "You must enter a user name");
					System.out.println("You must enter a user name");

				}
				else  {
					guiManCallback.unforwardButton_actionPerformed(event);
				}


			}
		});
		buttonPanel2.add(unforwardButton);

		// space
		buttonPanel2.add(Box.createRigidArea(new Dimension(5, 0)));



		payField = new JTextField(); // needed below

		// user name label
		String payFieldValue = "Amount";

		int gridy2 = 0;

		JLabel payLabel = new JLabel();
		payLabel.setDisplayedMnemonic('P');
		// setLabelFor() allows the mnemonic to work
		payLabel.setLabelFor(payField);
		payLabel.setText(payFieldValue);
		GridBagConstraints c1 = new GridBagConstraints();
		c1.gridx=0;
		c1.gridy=gridy2;
		c1.anchor=GridBagConstraints.WEST;
		c1.insets=new Insets(12,12,0,0);
		buttonPanel2.add(payLabel, c1);

		// user name text
		c1 = new GridBagConstraints();
		c1.gridwidth=5;
		c1.gridx=1;
		c1.gridy=gridy2;
		c1.anchor=GridBagConstraints.EAST;
		c1.weightx=1.0;
		c1.insets=new Insets(12,7,0,11);
		buttonPanel2.add(payField, c1);


		buttonPanel2.add(Box.createRigidArea(new Dimension(5, 0)));



		payButton = new JButton();
		payButton.setText("Make Payment");
		payButton.addActionListener(new ActionListener()
		{
			public void actionPerformed(ActionEvent event)
			{
				if (payField.getText().equals("")) {
					PopupWindow x = new PopupWindow("You didn't specified the payment amount.","Not a payment amount");
				}
				else {
					guiManCallback.payButton_actionPerformed(event);
				}
			}
		});


		buttonPanel2.add(payButton);

		// space
		buttonPanel2.add(Box.createRigidArea(new Dimension(5, 0)));
		//Set a relevant realm value
		//Bug report by Steven Lass (sltemp at comcast.net)
		//JLabel realmValueLabel = new JLabel("SipPhone.com"); // needed below

		// realm label


		// Buttons along bottom of window
		buttonPanel2.add(Box.createRigidArea(new Dimension(5, 0)));



		c_1 = new GridBagConstraints();
		c_1.anchor = GridBagConstraints.NORTH;
		c_1.gridx = 0;
		c_1.gridy = 11;
		c_1.gridwidth = 2;
		c_1.insets = new Insets(11, 12, 11, 11);

		centerPane.add(buttonPanel2, c_1);

		/////END












		contents.add(centerPane, BorderLayout.WEST);
		equalizeButtonSizes();


	} // initComponents()


	private void equalizeButtonSizes()
	{

		JButton[] buttons = new JButton[] {
				blockingButton, forwardButton, changeButton, cancelButton
		};

		String[] labels = new String[buttons.length];
		for (int i = 0; i < labels.length; i++) {
			labels[i] = buttons[i].getText();
		}

		// Get the largest width and height
		int i = 0;
		Dimension maxSize = new Dimension(0, 0);
		Rectangle2D textBounds = null;
		Dimension textSize = null;
		FontMetrics metrics = buttons[0].getFontMetrics(buttons[0].getFont());
		Graphics g = getGraphics();
		for (i = 0; i < labels.length; ++i) {
			textBounds = metrics.getStringBounds(labels[i], g);
			maxSize.width =
					Math.max(maxSize.width, (int) textBounds.getWidth());
			maxSize.height =
					Math.max(maxSize.height, (int) textBounds.getHeight());
		}

		Insets insets =
				buttons[0].getBorder().getBorderInsets(buttons[0]);
		maxSize.width += insets.left + insets.right;
		maxSize.height += insets.top + insets.bottom;

		// reset preferred and maximum size since BoxLayout takes both
		// into account
		for (i = 0; i < buttons.length; ++i) {
			buttons[i].setPreferredSize( (Dimension) maxSize.clone());
			buttons[i].setMaximumSize( (Dimension) maxSize.clone());
		}
	} // equalizeButtonSizes()

	/**
	 * The user has selected an option. Here we close and dispose the dialog.
	 * If actionCommand is an ActionEvent, getCommandString() is called,
	 * otherwise toString() is used to get the action command.
	 *
	 * @param actionCommand may be null
	 */
	private void dialogDone(Object actionCommand)
	{
		String cmd = null;
		if (actionCommand != null) {
			if (actionCommand instanceof ActionEvent) {
				cmd = ( (ActionEvent) actionCommand).getActionCommand();
			}
			else {
				cmd = actionCommand.toString();
			}
		}
		if (cmd == null) {
			// do nothing
		}
		else if (cmd.equals(CMD_CANCEL)) {
			setVisible(false);
		}

		//dispose();
	} // dialogDone()



} // class ManageSplash



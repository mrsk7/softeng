<?xml version="1.0" encoding="UTF-8"?>
<project basedir="." default="rebuild" name="sip-communicator">

<!-- CHECK User should modify the following path -->
    <property name="jdk.home" value="/usr/java/java"/>
<!-- END CHECK -->


    <property name="sip-communicator.libs.home" value="lib"/>
    <property name="sip-communicator.nativelibs.home" value="${sip-communicator.libs.home}/native"/>
    <property name="src" value="src"/>
    <property name="dest" value="classes"/>
    <property name="log" value="log"/>
    <property name="release" value="release"/>
    <property name="releasesrc" value="${release}/src"/>
    <property name="webstart" value="webstart"/>
    <property name="config.file" value="sip-communicator.xml"/>
    <property name="releaselinsc" value="${release}/linux/sip-communicator"/>
    <property name="releasesolsc" value="${release}/solaris/sip-communicator"/>
    <property name="releaseallsc" value="${release}/alljava/sip-communicator"/>
    <property name="releasewinsc" value="${release}/windows/sip-communicator"/>

    <!-- Set the jmf.home var - default is the all java pack unless we are
         running win lin or solaris-->

    <!-- fixed operating system detection - Damian Minkov -->
    <!-- windows -->
    <condition property="jmf.home" value="${sip-communicator.libs.home}/jmf-win">
        <os family="windows"/>
    </condition>
    <condition property="is.running.windows" value="${os.name}">
        <os family="windows"/>
    </condition>
    <!-- linux -->
    <condition property="jmf.home" value="${sip-communicator.libs.home}/jmf-lin">
        <equals arg1="${os.name}" arg2="linux" casesensitive="false" trim="true"/>
    </condition>
    <condition property="is.running.linux" value="${os.name}">
        <equals arg1="${os.name}" arg2="linux" casesensitive="false" trim="true"/>
    </condition>
    <!-- solaris -->
    <condition property="is.running.solaris" value="${os.name}">
        <equals arg1="${os.name}" arg2="solaris" casesensitive="false" trim="true"/>
    </condition>
    <condition property="is.running.solaris" value="${os.name}">
        <equals arg1="${os.name}" arg2="SunOS" casesensitive="false" trim="true"/>
    </condition>
    <condition property="jmf.home" value="${sip-communicator.libs.home}/jmf-sol">
        <equals arg1="${os.name}" arg2="solaris" casesensitive="false" trim="true"/>
    </condition>
    <condition property="jmf.home" value="${sip-communicator.libs.home}/jmf-sol">
        <equals arg1="${os.name}" arg2="SunOS" casesensitive="false" trim="true"/>
    </condition>


    <property name="jmf.home" value="${sip-communicator.libs.home}/jmf-all"/>
    <condition property="jmf.performancepack.available" value="true">
        <not>
            <equals arg1="${jmf.home}" arg2="${sip-communicator.libs.home}/jmf-all"
                casesensitive="false" trim="true"/>
        </not>
    </condition>
    <!-- end jmf.home-->

    <path id="project.class.path">
        <pathelement location="${dest}"/>
        <!-- jkd libs -->
        <pathelement location="${jdk.home}/jre/lib/rt.jar"/>
        <pathelement location="${jdk.home}/jre/javaws/javaws.jar"/>
        <pathelement location="${jdk.home}/jre/lib/charsets.jar"/>
        <pathelement location="${jdk.home}/jre/lib/ext/dnsns.jar"/>
        <pathelement location="${jdk.home}/jre/lib/ext/ldapsec.jar"/>
        <pathelement location="${jdk.home}/jre/lib/ext/localedata.jar"/>
        <pathelement location="${jdk.home}/jre/lib/ext/sunjce_provider.jar"/>
        <pathelement location="${jdk.home}/jre/lib/im/indicim.jar"/>
        <pathelement location="${jdk.home}/jre/lib/im/thaiim.jar"/>
        <pathelement location="${jdk.home}/jre/lib/jce.jar"/>
        <pathelement location="${jdk.home}/jre/lib/jsse.jar"/>
        <pathelement location="${jdk.home}/jre/lib/plugin.jar"/>
        <pathelement location="${jdk.home}/jre/lib/rt.jar"/>
        <pathelement location="${jdk.home}/jre/lib/sunrsasign.jar"/>
        <pathelement location="${jdk.home}/lib/dt.jar"/>
        <pathelement location="${jdk.home}/lib/htmlconverter.jar"/>
        <pathelement location="${jdk.home}/lib/tools.jar"/>
        <!-- JMF -->
        <pathelement location="${jmf.home}/jmf.jar"/>
        <pathelement location="${jmf.home}/sound.jar"/>
        <pathelement location="${jmf.home}/libjmutil.so.jar"/>
        <!-- JAIN SIP RI -->
        <pathelement location="${sip-communicator.libs.home}/JainSipApi1.1.jar"/>
        <pathelement location="${sip-communicator.libs.home}/nist-sip-1.2.jar"/>
        <pathelement location="${sip-communicator.libs.home}/nist-sdp-1.0.jar"/>
        <!-- log4j -->
        <pathelement location="${sip-communicator.libs.home}/log4j-1.2.8.jar"/>
        <!-- Stun4J -->
        <pathelement location="${sip-communicator.libs.home}/Stun4J.jar"/>
        <pathelement location="."/>
        <!-- Stun4J -->
        <pathelement location="${sip-communicator.libs.home}/Stun4J.jar"/>
    </path>

    <!-- TARGETS -->

    <!-- init - creates destination and log dirs-->
    <target name="init" description="creates destination and log dirs">
        <mkdir dir="${dest}"/>
        <mkdir dir="${log}"/>
    </target>

    <!-- jar - bundles the whole project (including libraries) into a single jar-->
    <target name="jar" depends="compile,resource"
        description="bundles the whole project (including libraries) into a single jar">
        <delete failonerror="false" includeemptydirs="true">
            <fileset dir="log/*.*"/>
        </delete>
        <jar compress="true" destfile="sip-communicator.jar">
            <fileset dir="${dest}">
                <include name="**/*.*"/>
            </fileset>
            <fileset dir=".">
                <include name="sip-communicator.properties"/>
                <include name="${config.file}"/>
                <include name="dialhistory.txt"/>
                <include name="log/**/*.*"/>
            </fileset>
            <manifest>
                <attribute name="Built-By" value="${user.name}"/>
                <attribute name="Main-Class" value="net.java.sip.communicator.SipCommunicator"/>
                <!--attribute name="Classpath" value="${JMF.home}/customizer.jar:${JMF.home}/sound.jar:${JMF.home}/mediaplayer.jar:${JMF.home}/multiplayer.jar:${JMF.home}/jmf.jar"/-->
            </manifest>
            <zipfileset src="${sip-communicator.libs.home}/JainSipApi1.1.jar"/>
            <zipfileset src="${sip-communicator.libs.home}/log4j-1.2.8.jar"/>
            <zipfileset src="${sip-communicator.libs.home}/nist-sdp-1.0.jar"/>
            <zipfileset src="${sip-communicator.libs.home}/nist-sip-1.2.jar"/>
            <zipfileset src="${sip-communicator.libs.home}/Stun4J.jar"/>
        </jar>
    </target>

    <!-- webjars - creates a set of jars for use by webstart -->
    <target name="webjars" depends="compile,resource"
        description="creates a set of jars for use by webstart">
        <delete failonerror="false" includeemptydirs="true">
            <fileset dir="log/*.*"/>
        </delete>
        <jar compress="true" destfile="webstart/sip-communicator.jar">
            <fileset dir="${dest}">
                <include name="net/java/sip/communicator/*.*"/>
            </fileset>
            <fileset dir=".">
                <include name="sip-communicator.properties"/>
                <include name="${config.file}"/>
                <include name="dialhistory.txt"/>
                <include name="log/**/*.*"/>
            </fileset>
            <manifest>
                <attribute name="Built-By" value="${user.name}"/>
                <attribute name="Main-Class" value="net.java.sip.communicator.SipCommunicator"/>
                <!--attribute name="Classpath" value="${JMF.home}/customizer.jar:${JMF.home}/sound.jar:${JMF.home}/mediaplayer.jar:${JMF.home}/multiplayer.jar:${JMF.home}/jmf.jar"/-->
            </manifest>
        </jar>
        <jar compress="true" destfile="webstart/sip-communicator.gui.jar">
            <fileset dir="${dest}">
                <include name="net/java/sip/communicator/gui/**/*.*"/>
            </fileset>
        </jar>
        <jar compress="true" destfile="webstart/sip-communicator.plugins.jar">
            <fileset dir="${dest}">
                <include name="net/java/sip/communicator/plugin/**/*.*"/>
            </fileset>
        </jar>
        <jar compress="true" destfile="webstart/sip-communicator.sip.jar">
            <fileset dir="${dest}">
                <include name="net/java/sip/communicator/sip/**/*.*"/>
            </fileset>
        </jar>
        <jar compress="true" destfile="webstart/sip-communicator.media.jar">
            <fileset dir="${dest}">
                <include name="net/java/sip/communicator/media/**/*.*"/>
            </fileset>
        </jar>
        <jar compress="true" destfile="webstart/sip-communicator.common.jar">
            <fileset dir="${dest}">
                <include name="net/java/sip/communicator/common/**/*.*"/>
            </fileset>
        </jar>
    </target>

    <!-- webstart creates a webstart package into the webstart directory
         packageing the application into a single jar archive-->
    <target name="webstart" depends="make">
        <copy todir="${webstart}" file="sip-communicator.jar" overwrite="true"/>
        <copy todir="${webstart}" overwrite="true">
            <fileset dir="${sip-communicator.libs.home}">
                <include name="jmf-win/*.jar"/>
                <include name="jmf-lin/*.jar"/>
                <include name="jmf-sol/*.jar"/>
                <include name="jmf-all/*.jar"/>
            </fileset>
        </copy>
        <input message="Enter certificate password: " addproperty="cert.pass"/>

        <signjar alias="sip-communicator.org"
                 keystore="sip-communicator.keystore"
                 storepass="${cert.pass}">
            <fileset dir="${webstart}">
                <include name="**/*.jar"/>
            </fileset>
        </signjar>
    </target>

    <!-- multiwebstart - creates a webstart a highly segmented webstart packaged
         into the webstart directory. Multiple jars are better when deploying
         over the web since users don't have to redownload the whole package
         every time-->
    <target name="multiwebstart" depends="webjars"
        description="creates a highly segmented webstart package into the
         webstart directory. Multiple jars are better when deploying over the
         web since users don't have to redownload the whole package every time">
        <copy todir="${webstart}" overwrite="true">
            <fileset dir="${sip-communicator.libs.home}">
                <include name="jmf-win/*.jar"/>
                <include name="jmf-lin/*.jar"/>
                <include name="jmf-sol/*.jar"/>
                <include name="jmf-all/*.jar"/>
                <include name="*.jar"/>
            </fileset>
        </copy>
        <input message="Enter certificate password: " addproperty="cert.pass"/>

        <signjar alias="sip-communicator.org"
                 keystore="sip-communicator.keystore"
                 storepass="${cert.pass}">
            <fileset dir="${webstart}">
                <include name="**/*.jar"/>
            </fileset>
        </signjar>
    </target>

    <!-- deploy-clarinet sends the webstart package to clarinet.u-strasbg.fr -->
    <target name="deploy-clarinet"
        description="sends the webstart package to clarinet.u-strasbg.fr">
        <input message="Enter password for clarinet.u-strasbg.fr: " addproperty="clarinet.passwd"/>
        <scp todir="sip-communicator@clarinet.u-strasbg.fr:/home/sip-communicator/public_html/download/webstart" password="${clarinet.passwd}" trust="true">
            <fileset dir="${webstart}">
                <include name="**/*.*"/>
            </fileset>
        </scp>
    </target>

    <!-- deploy-clarinet sends the webstart package to clarinet.u-strasbg.fr with a sipphone configuration-->
    <target name="deploy-sipphone"
        description="sends the webstart package to clarinet.u-strasbg.fr with a sipphone configuration">
        <input message="Enter password for clarinet.u-strasbg.fr: " addproperty="clarinet.passwd"/>
        <scp todir="sip-communicator@clarinet.u-strasbg.fr:/home/sip-communicator/public_html/sipphone" password="${clarinet.passwd}" trust="true">
            <fileset dir="${webstart}">
                <include name="**/*.*"/>
            </fileset>
        </scp>
    </target>


    <!-- compile -->
    <target name="compile" depends="init" description="javac-s everyting">
        <!-- use classpathref insteaf of bootclasspathref to avoid problems with non SUN VMs
             bug report and fix Zack Angelo - NOSTROMO -->
        <javac   classpathref="project.class.path" debug="true"
                 deprecation="true" destdir="${dest}" nowarn="false" target="1.2">
            <src path="${src}"/>
        </javac>
    </target>

    <!-- resource - copies resouerces to the output directory-->
    <target name="resource" depends="init"
        description="copies resouerces to the output directory">
        <copy todir="${dest}">
            <fileset dir="${src}">
                <include name="**/*.jpe"/>
                <include name="**/*.jpeg"/>
                <include name="**/*.rmf"/>
                <include name="**/*.wav"/>
                <include name="**/*.mid"/>
                <include name="**/*.midi"/>
                <include name="**/*.au"/>
                <include name="**/*.gif"/>
                <include name="**/*.png"/>
                <include name="**/*.jpg"/>
                <include name="**/*.aiff"/>
                <include name="**/*.txt"/>
                <!-- copy xmls to dst - report Damian Minkov -->
                <include name="**/*.xml"/>
                <include name="**/*.html"/>
                <include name="**/*.properties"/>
            </fileset>
        </copy>
    </target>
    <!-- javadoc - runs javadoc over project  sources-->
    <target name="javadoc" description="runs javadoc over project  sources">
        <javadoc author="true" destdir="doc/api" package="true">
            <fileset dir="${src}"/>
        </javadoc>
    </target>
    <!-- clean - deletes everyting -->
    <target name="clean" description="deletes everything">
        <delete file="sip-communicator.jar"/>
        <delete file="sip-communicator.zip"/>
        <delete>
            <fileset dir="${webstart}">
                    <include name="*.jar"/>
            </fileset>
        </delete>
        <delete failonerror="false" includeemptydirs="true">
            <fileset dir="${dest}"/>
        </delete>
        <delete failonerror="false" includeemptydirs="true">
            <fileset dir="${sip-communicator.nativelibs.home}"/>
        </delete>
        <delete failonerror="false" includeemptydirs="true">
            <fileset dir="${log}"/>
        </delete>
        <delete failonerror="false" includeemptydirs="true">
            <fileset dir="${release}"/>
        </delete>
    </target>
    <!-- clearlogs - deletes all files in the log directory-->
    <target name="clearlogs" description="deletes all files in the log directory">
        <delete failonerror="false" includeemptydirs="true">
            <fileset dir="${log}"/>
        </delete>
    </target>

    <!-- make - calls, init, compile, resource, and jar-->
    <target name="make" depends="init,compile,resource,jar"
        description="calls, init, compile, resource, and jar"/>
    <!-- all, a make alias -->
    <target name="all" depends="make"/>

    <!-- rebuild - calls clean and make-->
    <target name="rebuild" depends="clean,make" description="calls clean and make"/>

    <!-- run-project - starts the sip-communicator application-->
    <target name="run-project" depends="init,clearlogs"
        description="start the sip-communicator application the target is called by the run target so that corresponding environment variables are set first.">

        <!-- set the jmf.performancepack.extracted property so that we know
             whether we'll have to extract jmf native libs -->
        <condition property="jmf.performancepack.extracted">
            <available file="${sip-communicator.nativelibs.home}"/>
        </condition>

        <ant target="extractnativejmf"/>

        <java classname="net.java.sip.communicator.SipCommunicator"
              fork="true"
              failonerror="true" newenvironment="true"
              classpathref="project.class.path">
            <sysproperty key="log4j.configuration" value="sip-communicator.properties"/>
            <!--sysproperty key="java.library.path" value="${sip-communicator.nativelibs.home}${path.separator}${java.library.path}"/-->


            <!--sysproperty key="sun.boot.library.path" value="${sip-communicator.nativelibs.home}${path.separator}${java.library.path}"/-->
        </java>
    </target>

    <target name="run" depends="run-linux,run-windows"/>

    <target name="run-linux"
        if="is.running.linux"
        description="Runs the sip-communicator application after first setting needed environment variables such as LD_LIBRARY_PATH  on Linux(necessary for JMF to run on unix).">

        <exec executable="ant">
            <env key="LD_LIBRARY_PATH" path="${sip-communicator.nativelibs.home};${java.library.path}"/>
            <arg value="run-project"/>
        </exec>
    </target>

    <target name="run-solaris"
        if="is.running.solaris"
        description="Runs the sip-communicator application after first setting needed environment variables such as LD_LIBRARY_PATH  on Solairs(necessary for JMF to run on unix).">

        <exec executable="ant">
            <env key="LD_LIBRARY_PATH" path="${sip-communicator.nativelibs.home};${java.library.path}"/>
            <arg value="run-project"/>
        </exec>
    </target>

    <target name="run-windows"
        if="is.running.windows"
        description="Runs the sip-communicator application on windows operating systems.">
        <ant target="run-project"/>

    </target>


    <!-- build binary package, create executable and archive -->
    <target name="release" depends="init,jar"
        description="builds binary package, and creates installation packaged">
        <mkdir dir="${release}"/>
        <mkdir dir="${releaselinsc}"/>
        <mkdir dir="${releasewinsc}"/>
        <mkdir dir="${releaselinsc}/log"/>
            <touch file="${releaselinsc}/log/sip-communicator.app.log"/>
        <mkdir dir="${releaselinsc}/lib"/>
        <mkdir dir="${releasewinsc}/log"/>
            <touch file="${releasewinsc}/log/sip-communicator.app.log"/>
        <mkdir dir="${releasewinsc}/lib"/>

        <!-- generate the sh script -->
        <echo file="${releaselinsc}/sip-communicator.sh" append="false">
            export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:./lib
        </echo>
        <echo file="${releaselinsc}/sip-communicator.sh" message="java " append="true"/>
        <echo file="${releaselinsc}/sip-communicator.sh" message="-classpath sip-communicator.jar:jmf.jar:$CLASSPATH:$JMFHOME " append="true"/>
        <echo file="${releaselinsc}/sip-communicator.sh" message="-Dlog4j.configuration=sip-communicator.properties " append="true"/>
        <echo file="${releaselinsc}/sip-communicator.sh" message="net.java.sip.communicator.SipCommunicator" append="true"/>

        <chmod file="${releaselinsc}/sip-communicator.sh" perm="ugo+rx"/>

        <!-- generate the bat file -->
        <echo file="${releasewinsc}/sip-communicator.bat" message="java " append="false"/>
        <echo file="${releasewinsc}/sip-communicator.bat" message="-classpath sip-communicator.jar;jmf.jar;sound.jar;%CLASSPATH%;%JMFHOME% " append="true"/>
        <echo file="${releasewinsc}/sip-communicator.bat" message="-Dlog4j.configuration=sip-communicator.properties " append="true"/>
        <echo file="${releasewinsc}/sip-communicator.bat" message="-Djava.library.path=./lib " append="true"/>
        <echo file="${releasewinsc}/sip-communicator.bat" message="net.java.sip.communicator.SipCommunicator" append="true"/>


        <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
        <!-- copy & unjar files to WINDOWS destination -->
        <copy todir="${releasewinsc}">
            <fileset dir=".">
                <include name="sip-communicator.jar"/>
                <include name="sip-communicator.properties"/>
                <include name="${config.file}"/>
            </fileset>
            <fileset dir="${sip-communicator.libs.home}/jmf-win">
                <include name="**/*.jar"/>
                <exclude name="jmf-native.jar"/>
            </fileset>
        </copy>

        <unjar dest="${releasewinsc}/lib" overwrite="true" >
            <fileset dir="${sip-communicator.libs.home}/jmf-win">
                <include name="jmf-native.jar"/>
            </fileset>
        </unjar>
        <!-- delete the META-INF from the jmf-native.jar -->
        <delete failonerror="false" includeemptydirs="true">
            <fileset dir="${releasewinsc}/lib/META-INF"/>
        </delete>

        <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
        <!-- copy & unjar files to LINUX destination -->
        <copy todir="${releaselinsc}">
            <fileset dir=".">
                <include name="sip-communicator.jar"/>
                <include name="sip-communicator.properties"/>
                <include name="${config.file}"/>
            </fileset>
            <fileset dir="${sip-communicator.libs.home}/jmf-lin">
                <include name="**/*.jar"/>
                <exclude name="jmf-native.jar"/>
                <exclude name="libjmutil.so.jar"/>
            </fileset>
        </copy>

        <unjar dest="${releaselinsc}/lib" overwrite="true" >
            <fileset dir="${sip-communicator.libs.home}/jmf-lin">
                <include name="jmf-native.jar"/>
            </fileset>
        </unjar>
        <!-- delete the META-INF from the jmf-native.jar -->
        <delete failonerror="false" includeemptydirs="true">
            <fileset dir="${releaselinsc}/lib/META-INF"/>
        </delete>

        <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
        <!-- copy & unjar files to SOLARIS destination -->
        <copy todir="${releasesolsc}">
            <fileset dir=".">
                <include name="sip-communicator.jar"/>
                <include name="sip-communicator.properties"/>
                <include name="${config.file}"/>
            </fileset>
            <fileset dir="${sip-communicator.libs.home}/jmf-sol">
                <include name="**/*.jar"/>
                <exclude name="jmf-native.jar"/>
                <exclude name="libjmutil.so.jar"/>
            </fileset>
        </copy>

        <unjar dest="${releasesolsc}/lib" overwrite="true" >
            <fileset dir="${sip-communicator.libs.home}/jmf-sol">
                <include name="jmf-native.jar"/>
            </fileset>
        </unjar>
        <!-- delete the META-INF from the jmf-native.jar -->
        <delete failonerror="false" includeemptydirs="true">
            <fileset dir="${releasesolsc}/lib/META-INF"/>
        </delete>

        <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
        <!-- copy & unjar files to ALL JAVA destination -->
        <copy todir="${releaseallsc}">
            <fileset dir=".">
                <include name="sip-communicator.jar"/>
                <include name="sip-communicator.properties"/>
                <include name="${config.file}"/>
            </fileset>
            <fileset dir="${sip-communicator.libs.home}/jmf-all">
                <include name="**/*.jar"/>
            </fileset>
        </copy>

        <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
        <!-- create LINUX distribution -->
        <zip destfile="${release}/sip-communicator-linux.zip" >
            <fileset dir="${release}/linux">
                <include name="**/*.*"/>
            </fileset>
        </zip>

        <!-- create WINDOWS distribution -->
        <zip destfile="${release}/sip-communicator-windows.zip">
            <fileset dir="${release}/windows">
                <include name="**/*.*"/>
            </fileset>
        </zip>

        <!-- create SOLARIS distribution -->
        <zip destfile="${release}/sip-communicator-solaris.zip">
            <fileset dir="${release}/solaris">
                <include name="**/*.*"/>
            </fileset>
        </zip>
        <!-- create ALL JAVA distribution -->
        <zip destfile="${release}/sip-communicator-alljava.zip">
            <fileset dir="${release}/alljava">
                <include name="**/*.*"/>
            </fileset>
        </zip>

        <!-- create the source package-->
        <zip destfile="${release}/sip-communicator-windows.zip">
            <fileset dir="${release}/windows">
                <include name="**/*.*"/>
            </fileset>
        </zip>

    </target>

    <target name="release-src">
        <mkdir dir="${releasesrc}"/>
        <input message="Enter CVS User Name:" addproperty="cvs.user.name"/>

        <!-- checkout a fresh copy of the code -->
        <cvs cvsroot=":pserver:${cvs.user.name}@cvs.dev.java.net:/cvs"
             dest="${releasesrc}"
             package="sip-communicator">
        </cvs>

        <!-- create src .zip file -->
        <zip destfile="${release}/sip-communicator-src.zip">
            <fileset dir="${releasesrc}">
                <include name="**/*.*"/>
            </fileset>
        </zip>

        <!-- delete the the code that we just checked out so that there
            are no conflicts with future executions of this target-->
        <delete failonerror="false" includeemptydirs="true">
            <fileset dir="${releasesrc}/sip-communicator"/>
        </delete>
    </target>
    <!-- Verifies whether we have a jmf performance pack for the current
         operating system and extracts it in the lib/native directory -->
    <target name="extractnativejmf"
           if="jmf.performancepack.available"
           unless="jmf.performancepack.extracted"
           description="Verifies whether we have a jmf performance pack for
                        the current operating system and extracts it in the
                        lib/native directory">

        <echo>
            Extracting ${os.name} performance pack native libs
            from: ${jmf.home}/jmf-native.jar
            to:${sip-communicator.nativelibs.home}
        </echo>
        <unjar dest="${sip-communicator.nativelibs.home}" overwrite="true" >
            <fileset dir="${jmf.home}">
                <include name="jmf-native.jar"/>
            </fileset>
        </unjar>
    </target>
</project>
